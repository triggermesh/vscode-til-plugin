{
    "name": "HCL",
    "scopeName": "source.hcl",
    "comment": "HCL configuration language",
    "fileTypes": [
        "hcl"
    ],
    "patterns": [
        { "include": "#comment" },      
        { "include": "#block" },
        { "include": "#attribute" }
    ],
    "repository": {
        "comment": {
            "patterns": [
                {
                    "match": "(#|//)+(.*)",
                    "name": "comment.line.hcl"
                },
                {
                    "begin": "/\\*",
                    "end": "\\*/",
                    "name": "comment.block.hcl"
                }
            ]
        },
        "block": {
            "begin": "(([\\w-]+)((\\s+[\\w-]+)|(\\s+\"[^\"]*\"))*)\\s*\\{",
            "beginCaptures": {
                "1": { "name": "storage.type.hcl" }
            },
            "end": "\\}",
            "name": "meta.block.hcl",
            "patterns" : [
                { "include": "$self" },
                { "include": "#comment" },
                { "include": "#attribute" }
            ]
        },
        "attribute" : {
            "begin": "([\\w\\.-]+)\\s*(=)\\s*",
            "beginCaptures": {
                "1": { "name": "variable.parameter.hcl" },
                "2": { "name": "keyword.operator.assignment.hcl" }              
            },
            "end": "(?<!\\2)$",
            "endCaptures" : {
                "0": { "name": "keyword.operator.assignment.hcl" }  
            },
            "patterns" : [
                { "include": "#value" }
            ]
        },
        "value": {
            "patterns": [
                { "include": "#string" },
                { "include": "#hexadecimal" },
                { "include": "#decimal" },
                { "include": "#constant" },
                { "include": "#tuple" },
                { "include": "#object" },
                { "include": "#function-call" }
            ]
        },
        "tuple" : {
            "begin": "\\[",
            "end": "\\]",
            "patterns": [
                { "include": "#value" },
                { "include": "#separator" }
            ]
        },
        "object" : {
            "begin": "\\{",
            "end": "\\}",
            "patterns" : [
                {
                    "begin": "(([\\w\\.-]+)|(\"[\\w\\s\\.-]+\")|('[\\w\\s\\.-]+'))\\s*(=|:)\\s*",
                    "beginCaptures": {
                        "4": { "name": "keyword.operator.hcl" }
                    },
                    "end": "(?<!\\5)\\s*($|(?=\\}))",
                    "endCaptures" : {
                        "2": { "name": "keyword.operator.hcl" }
                    },
                    "patterns": [
                        { "include": "#value" },
                        { "include": "#separator" }
                    ]
                }
            ]
        },
        "hexadecimal" : {
            "match": "0x[0-9A-Fa-f]+",
            "name": "constant.numeric.hcl"
        },
        "decimal" : {
            "match": "\\b[0-9\\.]+\\b",
            "name": "constant.numeric.hcl"
        },
        "constant" : {
            "match": "\\b(true|false|null)\\b",
            "name": "constant.language.hcl"
        },
        "string" : {
            "patterns" : [
                {
                    "begin": "\"",
                    "end": "\"",
                    "name": "string.quoted.double.hcl"
                },
                {
                    "begin": "'",
                    "end": "'",
                    "name": "string.quoted.single.hcl"
                },
                {
                    "begin": "<<-?(\\w+)",
                    "beginCaptures": {
                        "1": { "name": "entity.other" }
                    },
                    "end": "^\\s*(\\1)$",
                    "endCaptures": {
                        "1": { "name": "entity.other" }
                    },
                    "name": "string.unquoted.heredoc.hcl"
                }
            ]
        },
        "function-call": {
            "match": "\\b([A-Za-z_-]\\w*)\\s*\\(",
            "captures": {
                "1": {
                    "name": "entity.name.function.hcl"
                }
            }
        },
        "accessor":  {
            "match": "\\.",
            "name": "punctuation.accessor.hcl"
        },
        "separator": {
            "match": ",",
            "name": "punctuation.separator.hcl"
        }
    }
}
